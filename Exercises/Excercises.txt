1. Modules 2 & 3


    Write a function that does the following:

    1. Connects to a remote computer(s) and retrieve the following information: 
        1.1 ComputerName
        1.2 BIOS Serial Number           (Hint Win32_BIOS class)
        1.3 Operating System             (Hint Win32_OperatingSystem class)
        1.4 Computer Model               (Hint Win32_ComputerSystem class)
        1.5 Manufacturer                 (Hint Win32_ComputerSystem)
        1.6 Memory (value will be in GB) (Hint Win32_ComputerSystem) 

    2. The function will recieve the following parameters:
        2.1 Computername - the name of the computer/computers that the function will connect to
        2.2 QueryType    - CIM / WMI providers to retrieve information

    3. The results of the function can be piped to export-csv 

    4. The function must include hard type variables
    5. The function must include commented help section with the following elements:
        5.1 .Synopsis
        5.2 Description
        5.3 Parameter (for each of the parameters)
        5.4 Examples
    Hint
        (Get-Help About_Comment_Based_Help)
        (https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comment_based_help?view=powershell-7.3#comment-based-help-for-a-function)


    *********************************************************************
    At this point we will assume that the input from the user is correct.
    *********************************************************************

2. Module 4 - Simple
    *********************************************************************
    *********************************************************************
                        Module 4 - Simple
    *********************************************************************
    *********************************************************************

    Write a fuction that does the following:
    1. Supports [Cmdletbinding()]
        1.1 the Cmdletbinding should include HelpURI
        1.1 the Cmdletbinding should include PositionalBinding (This is a $True/$False value)
    2. Accepts 3 parameters ($Param1, $Param2, $Param3)
    3. Only Param2 should be mandatory ([Parameter(mandatory)])
    4. $Param1 and $Param2 should include help message ([Parameter(HelpMessage = 'Message')])
    5. $Param3 should be a switch parameter
    6. The function will display the value of $Param1 and $Param2
    7. If $param3 is on there will be another message
    8. Write a message using Write-verbose
    9. Write a message using Write-debug

    Hints
    1. Use this command to get help about the [Parameter] attribute
        help about_ | Where-Object {$PSItem.name -like '*adv*param*'}| help -ShowWindow

    2. use this command to get help about the [Cmdletbinding] attribute:
        help about_ | Where-Object {$_.name -like '*bindi*'} | help -ShowWindow

3. Module 4 - Advanced
    *********************************************************************
    *********************************************************************
                    Module 4 - Advanced 
    *********************************************************************
    *********************************************************************

    Copy your/our function from excercise 1 and make the following changes:
    1. "Decorate" your function with [Cmdletbinding()] 
    2. Change the default behaviour function to stop make the parameters positional
    3. Make all of the parameters mandatory
    4. Turn the $ComputerName parameter into posotional parameter (in position 0)
    5. Make sure that the parameter $ComputerName can accept pipeline parameters (ByValue & ByPropertyName)
    6. Decorate all of the function parameters with HelpMessage 
    7. Turn the parameter $QueryType into ValidateSet parameter
    8. Write verbose messages in your function (any message)
    9. Write debug message in your function (any message)

4. Module 4 - Advanced 2
    *********************************************************************
    *********************************************************************
                    Module 4 - Advanced 2
    *********************************************************************
    *********************************************************************

    Take the function that you built in excercise 3.
    add the followings:

    1. Do not allow null or empty strings into $ComputerName (Hint help about_Functions_Advanced_Parameters -ShowWindow)
    2. Create documentation (Hint: hhelp about_comment_based_help -ShowWindow) for your function.


5. GIT & GITHUB
    *********************************************************************
    *********************************************************************
    *********************************************************************
    *********************************************************************
                    Module 7 - GIT & GITHUB
    *********************************************************************
    *********************************************************************
    *********************************************************************
    *********************************************************************
    1. Install & Configure your local GITHUB    
        1.1 git config --global user.name "My Name"
        1.2 git config --global user.email "My.Email@example.com"
    2. Initialize your local git repository
        2.1 git init
    3. Add files to your git repository (STAGING) 
        3.1 git add .
    4. Commit your files to your local repository
        4.1 git commit -m "My personal commit message"
    5. Make changes to a file in your local repository
    6. Repeate the process of staging and commit
    7. Create a new repository in GITHUB
    8. Link your existing repo to your newly created GITHUB repo    
        8.1 git remote add origin https://github.com/gadla/gitDemo.git
        8.2 git push --set-upstream origin master
    9. Make a local change to a file then stage and commit locally and push to your GITHUB repo
        9.1 Change your file
        9.2 git add .
        9.3 git commit -m "My personal commit message"
        9.4 git push
    10. Make a change through GITHUB to any of the files.
    11. Update your local git repository
        11.1 git pull

